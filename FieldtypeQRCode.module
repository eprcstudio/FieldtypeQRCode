<?php namespace ProcessWire;

require_once(__DIR__ . "/qrcode-generator.php");

use QRCode;

/**
 * Fieldtype generating a QR Code from the public URL of the page
 *
 * Copyright (c) 2021 Romain Cazier
 * Licensed under MIT License, see LICENSE
 *
 * https://eprc.studio
 * 
 * For ProcessWire 3.x
 * Copyright (c) 2021 by Ryan Cramer
 * Licensed under GNU/GPL v2
 *
 * https://www.processwire.com
 *
 * QRCode-Generator library by Kazuhiko Arase
 * https://github.com/kazuhikoarase/qrcode-generator/
 *
 */
class FieldtypeQRCode extends Fieldtype {

	public static function getModuleInfo() {
		return [
			"title" => "QR Code",
			"author" => "Romain Cazier",
			"version" => "1.0.3",
			"summary" => "Generates a QR Code from the public URL of the page",
			"href" => "https://github.com/romaincazier/FieldtypeQRCode",
			"icon" => "qrcode",
		];
	}
	
	/**
	 * Return page's `httpUrl` property. Can be hooked after to return anything
	 * 
	 * @return string String to be used to generate the QR Code
	 * 
	 */
	public function ___getQRText(Page $page) {
		return $page->httpUrl;
	}

	/**
	 * Based on the configuration, return an image with the QR Code in a svg or
	 * gif (in base64)
	 * 
	 * @return string `<img>` containing the base64 code of the QR Code
	 * 
	 */
	public function renderQRCode(Page $page, Field $field) {
		$isSvg = $field->get("format") === "svg";
		$renderSvgMarkup = $field->get("markup") === 1;

		$qrtext = $this->getQRText($page);
		$qr = QRCode::getMinimumQRCode($qrtext, QR_ERROR_CORRECT_LEVEL_L);

		ob_start();
		if ($isSvg) {
			$qr->printSVG();
		} else {
			$im = $qr->createImage(4, 4);
			imagegif($im);
		}
		$data = ob_get_contents();
		ob_end_clean();

		if ($isSvg) {
			$src = "data:image/svg+xml;base64," . base64_encode($data);
		} else {
			imagedestroy($im);
			$src = "data:image/gif;base64," . base64_encode($data);
		}

		if ($isSvg && $renderSvgMarkup) {
			return $data;
		} else {
			return "<img src=\"$src\" alt=\"QR Code: $qrtext\" />";
		}
	}

	public function ___wakeupValue(Page $page, Field $field, $value) {
		return $this->renderQRCode($page, $field);
	}

	public function ___getConfigInputfields(Field $field) {
		if(is_null($field->get("format"))) $field->set("format", "gif");
		if(is_null($field->get("markup"))) $field->set("markup", 0);

		$inputfields = parent::___getConfigInputfields($field);

		$f = $this->modules->get("InputfieldRadios");
		$f->attr("name", "format");
		$f->columnWidth = 50;
		$f->description = $this->_("Allows to select the image format of the QR Code.");
		$f->label = $this->_("Format");
		$f->optionColumns = 1;
		$f->value = $field->get("format");
		$f->addOptions(["gif" => ".gif", "svg" => ".svg"]);
		$inputfields->add($f);

		$f = $this->modules->get("InputfieldCheckbox");
		$f->attr("name", "markup");
		$f->columnWidth = 50;
		$f->description = $this->_("Allows to render the SVG markup directly, instead of a base64 image");
		$f->label = $this->_("Render SVG Markup ?");
		$f->label2 = $this->_("Yes");
		$f->showIf("format=svg");
		$f->value = $field->get("markup");
		if($field->get("markup") === 1) {
			$f->checked(true);
		}
		$inputfields->add($f);

		return $inputfields;
	}

	/*
		Code is a mix between https://processwire.com/talk/topic/20082-how-to-create-your-very-own-custom-fieldtypes-in-processwire/?tab=comments#comment-174172 (Bernhard Baumrock) and https://github.com/Toutouwai/FieldtypeRuntimeOnly/blob/master/FieldtypeRuntimeOnly.module (Robin Sallis)
	*/

	public function getInputfield(Page $page, Field $field) {
		$field->label = $field->label ?: $field->name;

		/** @var InputfieldMarkup $inputfield */
		$inputfield = $this->wire->modules("InputfieldMarkup");
		$inputfield->set('format', $field->get('format'));
		$inputfield->set('markup', $field->get('markup'));

		$inputfield->addHookAfter("getConfigInputfields", function($event) {
			$inputfields = $event->return;
			$options = [
				Inputfield::collapsedNo,
				Inputfield::collapsedYes,
				Inputfield::collapsedNever,
			];
			$collapsed = $inputfields->get("collapsed");
			foreach(array_keys($collapsed->getOptions()) as $option) {
				if(in_array($option, $options)) continue;
				$collapsed->removeOption($option);
			}
		});

		return $inputfield;
	}
	
	public function getCompatibleFieldtypes(Field $field) { return $this->wire(new Fieldtypes()); }
	public function getMatchQuery($query, $table, $subfield, $operator, $value) {
		throw new WireException("Field '{$query->field->name}' is runtime and not queryable");
	}
	public function getLoadQueryAutojoin(Field $field, DatabaseQuerySelect $query) { return null; }
	public function markupValue(Page $page, Field $field, $value = null, $property = '') { return $value; }
	public function sanitizeValue(Page $page, Field $field, $value) { return $value; }
	public function sleepValue(Page $page, Field $field, $value) { return $value; }
	public function savePageField(Page $page, Field $field) { return true; }
	public function loadPageField(Page $page, Field $field) { return ""; }
	public function getLoadQuery(Field $field, DatabaseQuerySelect $query) { return $query; }
	public function deletePageField(Page $page, Field $field) { return true; }
	public function createField(Field $field) { return true; }
	public function deleteField(Field $field) { return true; }
	public function getDatabaseSchema(Field $field) { return []; }
}